"""
Created on Thu Mar 12 09:33:39 2015

@author: zhyfly711
"""

import random
def hashStr(s, tableSize = 101):
    number = ''
    for c in s:
        number = number + str(ord(c))
    index = int(number) % tableSize
    return index

class intDict(object):
    '''A dictionary with integer keys'''
    
    
    def __init__(self, numBuckets): 
        '''this will produce an empty list like [[],[],[]]'''
        self.buckets = []
        self.numBuckets = numBuckets
        for i in range(numBuckets):
            self.buckets.append([])
    
    def addEntry(self, dictKey, dictVal):
        '''Assumes dictKey an int. Adds an entry'''
        hashBucket = self.buckets[dictKey%self.numBuckets]
        for i in range(len(hashBucket)):
            if hashBucket[i][0] == dictKey:
                hashBucket[i] = (dictKey, dictVal)
                return
        hashBucket.append((dictKey, dictVal))
    
    def getValue(self, dictKey):
        '''Assumes dictKey an int.
           returns entry associated with dictKey'''
        hashBucket = self.bucket[dictKey%self.numBuckets]
        for e in hashBucket:
            if e[0] == dictKey:
                return e[1]
        return None
    
    def __str__(self):
        res = '{'
        for item in self.buckets:
            for t in item:
                res = res + str(t[0]) + ':' + str(t[1]) + ','
        return res[:-1] + '}'
        # res[:-1] removes the last comma
        
# Now implement the function

D = intDict(29) # A hash with 29 budkets

for i in range(20):
    #choose a random int in range(10**5)
    key = random.choice(range(10**5))
    D.addEntry(key, i)